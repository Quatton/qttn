---
import MonacoEditor from "@/components/const/MonacoEditor.vue";
import RefreshButton from "@/components/const/RefreshButton.vue";
import ShareButton from "@/components/const/ShareButton.vue";
import WordBar from "@/components/const/WordBar.vue";
import { db } from "@/db/drizzle";
import Layout from "@/layouts/Layout.astro";
import type { CompressedWordWithMatch } from "@/lib/const/rules";

const id = Astro.params.id;
if (!id) {
  return Astro.redirect("/game");
}
const game = await db.query.Games.findFirst({
  where: (fields, { eq }) => eq(fields.id, id),
  with: {
    gameToWords: {
      with: {
        word: {
          columns: {
            id: true,
            name: true,
          },
        },
      },
      orderBy: (fields, { asc }) => asc(fields.index),
    },
  },
});
if (!game) {
  return Astro.redirect("/game");
}
const words: CompressedWordWithMatch[] = game.gameToWords.map((g) => ({
  id: g.word.id,
  name: g.word.name,
  match: false,
}));

Astro.cookies.set(
  "const:session",
  {
    id: game.id,
  },
  {
    expires: new Date(Date.now() + 1000 * 60 * 60 * 24 * 7),
  },
);
---

<Layout title="const!">
  <main
    class="mx-auto flex min-h-[100dvh] max-w-6xl flex-col items-center pb-8 pt-16"
  >
    <section
      class="flex w-full max-w-3xl flex-1 animate-fade flex-col items-stretch justify-evenly animate-once"
    >
      <div
        id="photoframe"
        class="flex flex-col gap-6 bg-base-100 px-4 pb-4 pt-4 @container-normal sm:pt-8"
      >
        <WordBar words={words} client:only="vue" game={game} />
        <MonacoEditor client:only="vue" game={game} />
      </div>
      <div
        class="grid grid-cols-2 gap-2 px-4 md:mx-auto md:w-[min(90%,64rem)] md:grid-cols-4"
      >
        <RefreshButton client:only="vue" gameId={game.id} mode={game.mode} />
        <ShareButton client:only="vue" gameId={game.id} />
      </div>
    </section>
  </main>
</Layout>
